version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: ccproject_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ccproject_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost","-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10

  auth_svc:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ccproject_auth_svc
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=backend.settings_auth
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ccproject_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/auth/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn backend.wsgi:application --bind 0.0.0.0:8001 --workers 3 --timeout 120
      "

  courses_svc:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ccproject_courses_svc
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=backend.settings_courses
    depends_on:
      db:
        condition: service_healthy
      auth_svc:
        condition: service_healthy
    networks:
      - ccproject_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/courses/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py insert_data &&
        gunicorn backend.wsgi:application --bind 0.0.0.0:8002 --workers 3 --timeout 120
      "

  catalog_svc:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ccproject_catalog_svc
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=backend.settings_catalog
    depends_on:
      db:
        condition: service_healthy
      auth_svc:
        condition: service_healthy
    networks:
      - ccproject_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/api/catalog/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py scrape_programs --force &&
        gunicorn backend.wsgi:application --bind 0.0.0.0:8003 --workers 3 --timeout 120
      "

  planner_svc:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ccproject_planner_svc
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=backend.settings_planner
    depends_on:
      db:
        condition: service_healthy
      auth_svc:
        condition: service_healthy
    networks:
      - ccproject_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/api/planned-courses/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn backend.wsgi:application --bind 0.0.0.0:8004 --workers 3 --timeout 120
      "

  nginx:
    image: nginx:alpine
    container_name: ccproject_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth_svc:
        condition: service_healthy
      courses_svc:
        condition: service_healthy
      catalog_svc:
        condition: service_healthy
      planner_svc:
        condition: service_healthy
    networks:
      - ccproject_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: ccproject_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      auth_svc:
        condition: service_healthy
      courses_svc:
        condition: service_healthy
      catalog_svc:
        condition: service_healthy
      planner_svc:
        condition: service_healthy
    networks:
      - ccproject_network

volumes:
  mysql_data:
    driver: local

networks:
  ccproject_network:
    driver: bridge
