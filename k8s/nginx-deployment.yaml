apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ccproject
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        # Use Kubernetes DNS for dynamic service resolution
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
        resolver_timeout 5s;

        server {
            listen 80;
            server_name _;

            # Increase buffer sizes for large responses
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # Health check endpoint for NGINX itself
            location /nginx-health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Auth microservice routes
            location /api/auth/ {
                set $auth_backend "auth-service.ccproject.svc.cluster.local:8001";
                proxy_pass http://$auth_backend/api/auth/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Courses microservice routes
            location /api/courses/ {
                set $courses_backend "courses-service.ccproject.svc.cluster.local:8002";
                proxy_pass http://$courses_backend/api/courses/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Catalog microservice routes
            location /api/catalog/ {
                set $catalog_backend "catalog-service.ccproject.svc.cluster.local:8003";
                proxy_pass http://$catalog_backend/api/catalog/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Planner microservice routes
            location /api/planned-courses/ {
                set $planner_backend "planner-service.ccproject.svc.cluster.local:8004";
                proxy_pass http://$planner_backend/api/planned-courses/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Frontend routes
            location / {
                set $frontend_backend "frontend-service.ccproject.svc.cluster.local:3000";
                proxy_pass http://$frontend_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # WebSocket support for Next.js HMR
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: ccproject
  labels:
    app: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: ccproject
  labels:
    app: nginx
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: nginx
        version: v1
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
