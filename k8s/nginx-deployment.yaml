apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ccproject
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
        resolver_timeout 5s;

        upstream auth_backend {
            server auth-service.ccproject.svc.cluster.local:8001;
        }

        upstream courses_backend {
            server courses-service.ccproject.svc.cluster.local:8002;
        }

        upstream catalog_backend {
            server catalog-service.ccproject.svc.cluster.local:8003;
        }

        upstream planner_backend {
            server planner-service.ccproject.svc.cluster.local:8004;
        }

        upstream frontend_backend {
            server frontend-service.ccproject.svc.cluster.local:3000;
        }

        server {
            listen 80;
            server_name _;

            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            location /nginx-health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            location /api/auth/ {
                proxy_pass http://auth_backend/api/auth/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /api/courses/ {
                proxy_pass http://courses_backend/api/courses/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /api/catalog/ {
                proxy_pass http://catalog_backend/api/catalog/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /api/planned-courses/ {
                proxy_pass http://planner_backend/api/planned-courses/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location / {
                proxy_pass http://frontend_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: ccproject
  labels:
    app: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: ccproject
  labels:
    app: nginx
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: nginx
        version: v1
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          livenessProbe:
            httpGet:
              path: /nginx-health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /nginx-health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
